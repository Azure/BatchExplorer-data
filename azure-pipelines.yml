# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.5
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Template Runner'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `Runner.py`."""
      from glob import iglob
      from os import path
      import os
      # Python >= 3.5

      os.environ["PS_BATCH_ACCOUNT_KEY"] = "$(PS_BATCH_ACCOUNT_KEY)" 
      os.environ["PS_BATCH_ACCOUNT_NAME"] = "$(PS_BATCH_ACCOUNT_NAME)"
      os.environ["PS_BATCH_ACCOUNT_SUB"] = "$(PS_BATCH_ACCOUNT_SUB)"
      os.environ["PS_BATCH_ACCOUNT_URL"] = "$(PS_BATCH_ACCOUNT_URL)"
      os.environ["PS_SERVICE_PRINCIPAL_CREDENTIALS_CLIENT_ID"] = "$(PS_SERVICE_PRINCIPAL_CREDENTIALS_CLIENT_ID)" 
      os.environ["PS_SERVICE_PRINCIPAL_CREDENTIALS_RESOUCE"] = "$(PS_SERVICE_PRINCIPAL_CREDENTIALS_RESOUCE)" 
      os.environ["PS_SERVICE_PRINCIPAL_CREDENTIALS_TENANT"] = "$(PS_SERVICE_PRINCIPAL_CREDENTIALS_TENANT)"
      os.environ["PS_SERVICE_PRINCIPAL_CREDENTIALS_SECRET"] = "$(PS_SERVICE_PRINCIPAL_CREDENTIALS_SECRET)"
      os.environ["PS_STORAGE_ACCOUNT_KEY"] = "$(PS_STORAGE_ACCOUNT_KEY)"
      os.environ["PS_STORAGE_ACCOUNT_NAME"] = "$(PS_STORAGE_ACCOUNT_NAME)"
 
      Runner_py = next(iglob(path.join('**', 'Runner.py'), recursive=True), None)
      if not Runner_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(Runner_py))
      print("PS_BATCH_ACCOUNT_KEY= ","$(PS_BATCH_ACCOUNT_KEY)")
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
- script: |
    python -m pip install --upgrade pip setuptools wheel django
    pip install -r Runner/requirements.txt
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python Runner.py ".\Tests\TestConfiguration.json" 
  condition: succeededOrFailed()
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'